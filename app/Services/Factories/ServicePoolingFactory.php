<?php


namespace App\Services\Factories;


use App\Services\Entities\ServicePoolingEntity;
use App\Services\UserEntity;
use App\Services\UserFactory;
use App\User;
use CsCannon\CSEntityFactory;

class ServicePoolingFactory extends CSEntityFactory
{

    public static $isa = 'poolRequest';
    public static $file ='poolRequestFile';

    protected static $className = ServicePoolingEntity::class ;
     const AMOUNT ='amount';
     const TO_USER ='toUser';
    const STATUS ='status';

    const STATUS_OPEN ='open';
    const STATUS_CLOSED ='closed';
    const KIND = 'kind';

    const REWARD_KIND = 'reward';
    const SPEND_KIND = 'spend';


     public $userEntityFactory = null ;

     public function __construct()
     {
         parent::__construct();

         $this->userEntityFactory = new UserFactory();
         $this->joinFactory(static::TO_USER,$this->userEntityFactory);

         return $this ;

     }


    public function populateLocal($limit = 10000, $offset = 0, $asc = 'ASC')
     {
         $return =  parent::populateLocal($limit, $offset, $asc); // TODO: Change the autogenerated stub

         $this->joinPopulate();

         return $return ;


     }


    public function create(UserEntity $user,$amount,$spend=false){

         $kind = self::REWARD_KIND;
         if ($spend) $kind = self::SPEND_KIND;

             $this->createNew([static::AMOUNT=>$amount,
            self::STATUS=>static::STATUS_OPEN,
                 self::KIND=>$kind
            ],[static::TO_USER=>$user,
                 static::STATUS=>static::STATUS_OPEN,
                 self::KIND=>$kind
                 ]);


    }

    public function poolError($message){

         $this->system->systemError(555,self::class,4,'pool Error '.$message);

    }

    public function killAllActive($message){

       $servicePoolingFactory = new ServicePoolingFactory();
       $servicePoolingFactory->setFilter(self::STATUS,self::STATUS_OPEN);
       $servicePoolingFactory->populateLocal();

       foreach ($servicePoolingFactory->getEntities() as $poolEntity){

           $poolEntity->getBrotherEntity(self::STATUS);
       }

    }

}